# -*- coding: utf-8 -*-
"""Agriculture.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pMn3P0RSiUFRzJs0rVAXc0BgYYntZQaL
"""

#for data manupulation
import numpy as np
import pandas as pd
#for data visualization
import matplotlib.pyplot as plt
import seaborn as sns
#for interactive analysis
from ipywidgets import interact
import warnings
warnings.filterwarnings('ignore')

"""Loaded Data Set"""

data=pd.read_csv("/content/data.csv")
print(data)

sns.heatmap(data.isnull())
plt.show()

"""Summer Crops"""

print(data[(data['temperature']>30) & (data['humidity']>50)]['label'].unique())

"""Monsoon Crops"""

print(data[(data['rainfall']>200) & (data['humidity']>50)]['label'].unique())

"""Wintercrops"""

print(data[(data['temperature']<20) & (data['humidity']>30)]['label'].unique())

plt.subplot(3,4,1)
sns.histplot(data['N'],color="green")
plt.xlabel("Nitrogen")
plt.grid()

plt.subplot(3,4,2)
sns.histplot(data['P'],color="yellow")
plt.xlabel("phosphorus")
plt.grid()

plt.subplot(3,4,3)
sns.histplot(data['K'],color="red")
plt.xlabel("potassium")
plt.grid()

plt.subplot(3,4,4)
sns.histplot(data['rainfall'],color="blue")
plt.xlabel("Rainfall")
plt.grid()

plt.subplot(2,4,5)
sns.histplot(data['temperature'],color="red")
plt.xlabel("temperature")
plt.grid()

plt.subplot(2,4,6)
sns.histplot(data['humidity'],color="gray")
plt.xlabel("humidity")
plt.grid()

plt.subplot(2,4,7)
sns.histplot(data['ph'],color="green")
plt.xlabel("ph")
plt.grid()

@interact
def summary(crops=list(data['label'].value_counts().index)):
  x=data[data['label']==crops]
  print("min N required",x['N'].min())
  print("Avg N required",x['N'].mean())
  print(" N required",x['N'].max())

  print("min P required",x['P'].min())
  print("Avg P required",x['P'].mean())
  print("Max P required",x['P'].max())

  print("min K required",x['K'].min())
  print("Avg K required",x['K'].mean())
  print("Max K required",x['K'].max())

  print("min temperature required",x['temperature'].min())
  print("Avg temperature required",x['temperature'].mean())
  print("Max temperature required",x['temperature'].max())

  print("min humidity required",x['humidity'].min())
  print("Avg humidity required",x['humidity'].mean())
  print("Max humidity required",x['humidity'].max())

  print("min ph required",x['ph'].min())
  print("Avg ph required",x['ph'].mean())
  print("Max ph required",x['ph'].max())

  print("min rainfall required",x['rainfall'].min())
  print("Avg rainfall required",x['rainfall'].mean())
  print("Max rainfall required",x['rainfall'].max())

from sklearn.cluster import KMeans
x=data.drop(['label'], axis=1)
x=x.values
print(x)

wcss=[]
for i in range(1,11):
 km=KMeans(n_clusters=i,init="k-means++",max_iter=2000,n_init=10,random_state=0)
 km.fit(x)
 wcss.append(km.inertia_)

plt.plot(range(1,11),wcss)
plt.show()

a=data['label']
km=KMeans(n_clusters=4,init="k-means++",max_iter=2000,n_init=10,random_state=0)
y_means=km.fit_predict(x)
y_means=pd.DataFrame(y_means)
z=pd.concat([y_means,a],axis=1)

z=z.rename(columns={0:'cluster'})
print("1st cluster: ",z[z['cluster']==0]['label'].unique())
print("2nd cluster: ",z[z['cluster']==1]['label'].unique())
print("3rd cluster: ",z[z['cluster']==2]['label'].unique())
print("4th cluster: ",z[z['cluster']==3]['label'].unique())

"""**Crop Prediction**"""

x=data.drop(['label'], axis=1)
y=data['label']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test= train_test_split(x,y,test_size=.2,random_state=0)

from sklearn.linear_model import LogisticRegression
model=LogisticRegression()
model.fit(x_train,y_train)

"""**Prediction**"""

inp=np.array([[30,20,20,30,60,7,80]])
outp=model.predict(inp)
print("predict crop is ",outp)

"""**Model Accurecy Checking**"""

from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

y_predict=model.predict(x_test)
cr=classification_report(y_test,y_predict)
print(cr)

"""**Confusion matrix**"""

cm=confusion_matrix(y_test,y_predict)
sns.heatmap(cm,annot=True)